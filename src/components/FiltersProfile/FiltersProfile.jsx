import { useEffect, useMemo, useRef, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import CategorySelect from '../CategorySelect/CategorySelect.jsx';
import IngredientsSelect from '../IngredientsSelect/IngredientsSelect.jsx';
import { selectIngredients } from '../../redux/ingredient/selectors.js';
import { fetchOwn, fetchSaved } from '../../redux/userPro/thunks.js';
import { selectUserProfileType } from '../../redux/userPro/selectors.js';
import css from './FiltersProfile.module.css';

const SPRITE = '/sprite/symbol-defs.svg';

const FiltersProfile = () => {
  const dispatch = useDispatch();

  // –∫–∞–∫–∞—è –≤–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∞–∫—Ç–∏–≤–Ω–∞: 'own' | 'favorites'
  const profileType = useSelector(selectUserProfileType);
  const fetcher = profileType === 'favorites' ? fetchSaved : fetchOwn;

  // –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ–≤
  const [selectedCategory, setSelectedCategory] = useState('');
  // —Ç—É—Ç —É –Ω–∞—Å _id –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ –∏–∑ —Å–µ–ª–µ–∫—Ç–∞
  const [selectedIngredient, setSelectedIngredient] = useState('');
  const [isOpen, setIsOpen] = useState(false);

  // –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
  const query = useSelector((s) => s.recipes.query);
  const titleFromQuery = (query?.title || '').trim();

  // —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
  const ingredients = useSelector(selectIngredients);
  const ingredientsLoaded =
    Array.isArray(ingredients) && ingredients.length > 0;

  // üîÅ –º–∞–ø–ø–∏–º _id -> name (–¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∫ –æ–∂–∏–¥–∞–µ—Ç –ò–ú–Ø –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞)
  const ingredientName = useMemo(() => {
    if (!selectedIngredient) return '';
    const found = (ingredients || []).find(
      (i) => String(i?._id) === String(selectedIngredient),
    );
    return found?.name || '';
  }, [selectedIngredient, ingredients]);

  // –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const lastKeyRef = useRef('');

  useEffect(() => {
    // –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç, –Ω–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –µ—â–µ –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª—Å—è ‚Äî –∂–¥–µ–º
    if (selectedIngredient && !ingredientsLoaded) return;

    // –µ—Å–ª–∏ –Ω–µ—Ç –≤–æ–æ–±—â–µ –Ω–∏–∫–∞–∫–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    // (–ø–µ—Ä–≤–∏—á–Ω—É—é –ª–µ–Ω—Ç—É –≥—Ä—É–∑–∏—Ç useLoadProfileRecipes)
    if (!titleFromQuery && !selectedCategory && !ingredientName) return;

    const key = `${profileType}|${titleFromQuery}|${selectedCategory}|${ingredientName}|1`;
    if (key === lastKeyRef.current) return;

    // ‚ö†Ô∏è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–µ–∫ –ò–ú–Ø –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞, –∞ –Ω–µ _id
    dispatch(
      fetcher({
        page: 1,
        limit: 12,
        replace: true,
        title: titleFromQuery,
        category: selectedCategory,
        ingredient: ingredientName, // <-- –∏–º—è
      }),
    );

    lastKeyRef.current = key;
  }, [
    dispatch,
    fetcher,
    profileType,
    titleFromQuery,
    selectedCategory,
    ingredientName,
    selectedIngredient,
    ingredientsLoaded,
  ]);

  const handleReset = () => {
    setSelectedCategory('');
    setSelectedIngredient('');
    // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–Ω—Ç—É –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–Ω–æ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º title)
    dispatch(
      fetcher({
        page: 1,
        limit: 12,
        replace: true,
        title: titleFromQuery,
        category: '',
        ingredient: '',
      }),
    );
    lastKeyRef.current = ''; // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª—é—á, —á—Ç–æ–±—ã —Å–ª–µ–¥—É—é—â–∏–π –≤—ã–±–æ—Ä –æ—Ç—Ä–∞–±–æ—Ç–∞–ª
  };

  return (
    <>
      <button
        type="button"
        className={css.filtersBtn}
        onClick={() => setIsOpen((v) => !v)}
      >
        <span>Filters</span>
        <svg className={css.icon} aria-hidden="true" width="24" height="24">
          <use href={`${SPRITE}#icon-filter`} />
        </svg>
      </button>

      {isOpen && (
        <div className={css.panel}>
          <button className={css.resetButton} onClick={handleReset}>
            Reset filters
          </button>

          <CategorySelect
            selectedCategory={selectedCategory}
            onChange={setSelectedCategory}
          />

          <IngredientsSelect
            selectedIngredient={selectedIngredient}
            onChange={setSelectedIngredient}
          />
          {/* –ü–æ –¢–ó ‚Äî –±–µ–∑ –∫–Ω–æ–ø–∫–∏ Apply (–∞–≤—Ç–æ-–∑–∞–ø—Ä–æ—Å –≤ useEffect) */}
        </div>
      )}
    </>
  );
};

export default FiltersProfile;

// import { useState } from 'react';
// import { useDispatch, useSelector } from 'react-redux';
// import CategorySelect from '../CategorySelect/CategorySelect.jsx';
// import IngredientsSelect from '../IngredientsSelect/IngredientsSelect.jsx';
// import { searchRecipes } from '../../redux/recipes/operations.js';
// import { selectIngredients } from '../../redux/ingredient/selectors.js';
// import css from './FiltersProfile.module.css';

// const SPRITE = '/sprite/symbol-defs.svg';

// const FiltersProfile = () => {
//   const dispatch = useDispatch();

//   const [selectedCategory, setSelectedCategory] = useState('');
//   const [selectedIngredient, setSelectedIngredient] = useState('');
//   const [isOpen, setIsOpen] = useState(false);

//   const query = useSelector((s) => s.recipes.query);
//   const ingredients = useSelector(selectIngredients);
//   const ingredientsLoaded =
//     Array.isArray(ingredients) && ingredients.length > 0;

//   const handleApplyFilters = () => {
//     if (selectedIngredient && !ingredientsLoaded) return;

//     dispatch(
//       searchRecipes({
//         title: query?.title ?? '',
//         category: selectedCategory,
//         ingredient: selectedIngredient,
//         page: 1,
//       }),
//     );
//   };

//   const handleReset = () => {
//     setSelectedCategory('');
//     setSelectedIngredient('');
//   };

//   return (
//     <>
//       <button
//         type="button"
//         className={css.filtersBtn}
//         onClick={() => setIsOpen((v) => !v)}
//       >
//         <span>Filters</span>
//         <svg className={css.icon} aria-hidden="true" width="24" height="24">
//           <use href={`${SPRITE}#icon-filter`} />
//         </svg>
//       </button>

//       {isOpen && (
//         <div className={css.panel}>
//           <button className={css.resetButton} onClick={handleReset}>
//             Reset filters
//           </button>
//           <CategorySelect
//             selectedCategory={selectedCategory}
//             onChange={setSelectedCategory}
//           />
//           <IngredientsSelect
//             selectedIngredient={selectedIngredient}
//             onChange={setSelectedIngredient}
//           />
//           <button className={css.applyButton} onClick={handleApplyFilters}>
//             Apply filters
//           </button>
//         </div>
//       )}
//     </>
//   );
// };

// export default FiltersProfile;
